# -*- mode: ruby -*-
# vi: set ft=ruby :
# vagrant plugins required:
# vagrant-berkshelf, vagrant-omnibus, vagrant-hosts
require 'yaml'
# Mesos configurations
mesos_version = "0.25.0"
build_version = "-0.2.70.ubuntu1404"


def is_plugin(name)
  if Vagrant.has_plugin?(name)
    puts "using #{name}"
  else
    puts "please run vagrant plugin install #{name}"
    exit(1)
  end
end

Vagrant.configure("2") do |config|
  # https://vagrantcloud.com/everpeace/boxes/mesos
  config.vm.box = "everpeace/mesos"

  # enable plugins
  config.berkshelf.enabled = true
  config.berkshelf.berksfile_path ="./Berksfile"
  config.omnibus.chef_version = :latest

  # if you want to use vagrant-cachier,
  # please install vagrant-cachier plugin.
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.enable :apt
    config.cache.enable :chef
  end

  is_plugin("vagrant-berkshelf")
  is_plugin("vagrant-omnibus")
  is_plugin("vagrant-hosts")

  config.vm.provider :virtualbox do |vb, override|
    vb.name = 'vagrant-mesos-standalone'

    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "#{1024*2}"]
    vb.customize ["modifyvm", :id,  "--cpus",  "2"]

    # please customize hostname and private ip configuration if you needed.
    override.vm.hostname = "mesos"
    private_ip = "192.168.33.10"
    override.vm.network :private_network, ip: private_ip
    override.vm.provision :hosts do |provisioner|
      provisioner.add_host private_ip , [ config.vm.hostname ]
    end

    # for mesos web UI.
    override.vm.network :forwarded_port, guest: 5050, host: 5050
    # for Marathon web UI
    override.vm.network :forwarded_port, guest: 8080, host: 8080
    # for Chronos web UI
    override.vm.network :forwarded_port, guest: 8081, host: 8081

    override.vm.provision :shell do |s|
      s.path = "scripts/populate_sshkey.sh"
      s.args = "/home/vagrant vagrant"
    end
  end

  config.vm.provider :aws do |aws, override|
    conf = YAML.load_file('aws_config.yaml')

    if conf["custom_ami"] then
      override.vm.box = "dummy"
      override.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
    end

    # workaround for https://github.com/mitchellh/vagrant-aws/issues/275
    aws.ami=""

    aws.access_key_id = conf["access_key_id"]
    aws.secret_access_key = conf["secret_access_key"]

    aws.region = conf["region"]
    if conf["custom_ami"] then
      aws.ami = conf["custom_ami"]
    end
    aws.instance_type = conf["instance_type"]
    aws.keypair_name = conf["keypair_name"]
    aws.security_groups = conf["security_groups"]
    aws.tags = {
      Name: 'vagrant-mesos-standalone'
    }

    override.ssh.username = "ubuntu"
    override.ssh.private_key_path = conf["ssh_private_key_path"]
    override.vm.provision :shell do |s|
      s.path = "scripts/populate_sshkey.sh"
      s.args = "/home/ubuntu ubuntu"
    end
  end

  config.vm.provision :shell, :privileged => true, :inline => <<-SCRIPT
        apt-get update
        apt-get install  -y software-properties-common
        apt-key adv --keyserver keyserver.ubuntu.com --recv EEA14886
        add-apt-repository ppa:webupd8team/java
        apt-get update
        echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
        apt-get install  -y oracle-java8-installer
        mkdir -p /var/log/marathon
        kill -KILL `ps augwx | grep marathon | tr -s " " | cut -d' ' -f2`
        curl -XGET http://downloads.mesosphere.com/marathon/v0.11.1/marathon-0.11.1.tgz -o /usr/src/marathon.tar.gz
        mv  /opt/marathon  /opt/marathon.old
        mkdir /opt/marathon
        tar xvzf /usr/src/marathon.tar.gz -C /opt/marathon --strip 1
        cd /usr/src
        wget www.scala-lang.org/files/archive/scala-2.11.7.deb
        dpkg -i scala-2.11.7.deb
        # sbt installation
        echo "deb https://dl.bintray.com/sbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list
        apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 642AC823
        apt-get update
        apt-get install -y sbt
    SCRIPT

  config.vm.provision :chef_solo do |chef|
    # chef.log_level = :debug
    chef.add_recipe "apt"
    chef.add_recipe "mesos::master"
    chef.add_recipe "mesos::slave"

    # You may also specify custom JSON attributes:
    chef.json = {
      :mesos => {
        :type         => "mesosphere",
        :version      => mesos_version,
        :master_ips => ["localhost"],
        :slave_ips  => ["localhost"],
        :master => {
          :cluster => "MyCluster",
          :quorum  => "1",
          :zk      => "zk://localhost:2181/mesos"
        },
        :slave =>{
          :master => "zk://localhost:2181/mesos",
          :containerizers => "docker,mesos",
          :isolation => "cgroups/cpu,cgroups/mem",
          :executor_registration_timeout => "5mins",
        }
      }
    }
  end


 config.vm.provision :shell, :privileged => true, :inline => <<-SCRIPT
         /opt/marathon/bin/start --master zk://localhost:2181/mesos --zk  zk://localhost:2181/marathon > /var/log/marathon/nohup.log  &
        /opt/marathon/bin/haproxy-marathon-bridge install_haproxy_system localhost:8080
        /bin/echo "* * * * * /usr/local/bin/haproxy-marathon-bridge logged refresh_system_haproxy localhost:8080" > /var/spool/cron/crontabs/root
        /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -sf 
        /usr/sbin/service cron restart
    SCRIPT


  # If you wanted use `.dockercfg` file
  # Please place the file simply on this directory
  if File.exist?(".dockercfg")
    config.vm.provision :shell, :priviledged => true, :inline => <<-SCRIPT
      cp /vagrant/.dockercfg /root/.dockercfg
      chmod 600 /root/.dockercfg
      chown root /root/.dockercfg
      SCRIPT
  end
end
